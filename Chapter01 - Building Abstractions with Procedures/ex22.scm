(load "testing_for_primality.scm")

(define (timed-prime-test n)
    (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
    (if (prime? n) (report-prime n (- (runtime) start-time)) 0))

(define (report-prime n elapsed-time)
    (newline)
    (display n)
    (display " *** ")
    (display elapsed-time)
    1
)

(define (search-for-primes a b cnt)
    (cond ((or (>= a b) (>= cnt 10)) (display "\ndone\n"))
          ((even? a) (search-for-primes (+ a 1) b cnt))
          (else (let ((flag (timed-prime-test a)))
                (search-for-primes (+ a 2) b (if (= flag 1) (+ 1 cnt) cnt))))))

(search-for-primes 1e9 1e10 0)
; 1000000007. *** .09000000000000001
; 1000000009. *** .09
; 1000000021. *** .1
; 1000000033. *** .08999999999999997
; 1000000087. *** .08999999999999997
; 1000000093. *** .09999999999999998
; 1000000097. *** .10000000000000009
; 1000000103. *** .08999999999999997
; 1000000123. *** .09000000000000008
; 1000000181. *** .09999999999999987
; done


(search-for-primes 1e10 1e11 0)
; 10000000019. *** .27
; 10000000033. *** .2899999999999998
; 10000000061. *** .28000000000000025
; 10000000069. *** .29000000000000004
; 10000000097. *** .28000000000000025
; 10000000103. *** .2899999999999996
; 10000000121. *** .28000000000000025
; 10000000141. *** .28000000000000025
; 10000000147. *** .29000000000000004
; 10000000207. *** .27999999999999936
; done

(search-for-primes 1e11 1e12 0)
; 100000000003. *** .92
; 100000000019. *** .9100000000000001
; 100000000057. *** .8800000000000003
; 100000000063. *** .8799999999999999
; 100000000069. *** .8900000000000001
; 100000000073. *** .8799999999999999
; 100000000091. *** .8799999999999999
; 100000000103. *** .8899999999999997
; 100000000129. *** .8900000000000006
; 100000000171. *** .8800000000000008
; done

; O(sqrt(N))
; n -> 10n -> 100n
; t ->  3t ->  10t
